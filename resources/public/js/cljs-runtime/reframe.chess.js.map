{"version":3,"sources":["reframe/chess.cljs"],"mappings":"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","names":["reframe.chess/place-pieces","board","row","color","cljs.core.assoc","reframe.chess/place-pawns","reframe.chess/init-board","reframe.chess/number-to-letter","num","cljs.core/char","reframe.chess/letter-to-number","letter","cljs.core._EQ_","reframe.chess/difference","a","b","Math/abs","reframe.chess/file-distance","file1","file2","file1-num","file2-num","reframe.chess/rank-direction","rank1","rank2","reframe.chess/file-direction","reframe.chess/rank-distance","p__28357","p__28358","vec__28359","cljs.core.nth","vec__28362","reframe.chess/valid-pawn-move?","from-file","from-rank","to-file","to-rank","to-piece","cljs.core.get","direction","pawn-starting-rank","at-starting-rank?","is-capture?","and__4210__auto__","p__28365","p__28366","vec__28367","vec__28370","reframe.chess/valid-knight-move?","rank-distance","file-distance","reframe.chess/rank-range","from","to","cljs.core.range","reframe.chess/file-range","from-num","to-num","num-range","cljs.core.map","reframe.chess/squares-empty?","squares","cljs.core.reduce","final-value","square","piece-on-square","p__28373","p__28374","vec__28375","vec__28378","reframe.chess/valid-bishop-move?","rank-range","file-range","cljs.core/vector","p__28381","p__28382","vec__28383","vec__28386","reframe.chess/valid-rook-move?","file","cljs.core/PersistentVector","rank","reframe.chess/valid-queen-move?","or__4212__auto__","p__28389","p__28390","vec__28391","vec__28394","reframe.chess/valid-king-move?","reframe.chess/opposite-color","reframe.chess/execute-move","cljs.core/assoc-in","cljs.core.dissoc","reframe.chess/valid-move?","from-piece","reframe.chess/king-under-attack?","vec__28397","king-coordinates","_","cljs.core/first","cljs.core.filter","piece","cljs.core/val","reframe.chess/add-to-file","amount","p__28400","p__28401","vec__28402","vec__28405","reframe.chess/valid-castle?","king","is-king","king-unmoved?","intermediate-square","rook-file","rook","rook-unmoved?","cljs.core/not","p__28408","p__28409","vec__28410","vec__28413","reframe.chess/execute-castle","rook-square","p__28416","p__28417","vec__28418","vec__28421","reframe.chess/execute-en-passant","pawn","p__28424","p__28425","vec__28426","vec__28429","reframe.chess/valid-en-passant?","is-pawn?","en-passant-rank","enemy-pawn-starting-rank","last-move","cljs.core.get_in","reframe.chess/move-piece","cljs.test/test-var","reframe.chess/init-board-test","cljs.test.update_current_env_BANG_","cljs.core/conj","cljs.test/update-current-env!","cljs.core/rest","values__9153__auto__","cljs.core/List","result__9154__auto__","cljs.core.apply","cljs.test/report","cljs.core/cons","t__9190__auto__","e28432","cljs.core/=","e28433","reframe.chess/move-piece-test","new-board","board-after-illegal-move","board-after-move-to-self","e28434","e28435","e28436"],"sourcesContent":["(ns reframe.chess\r\n  (:require [clojure.test :refer [deftest is testing]]))\r\n\r\n(defn place-pieces\r\n  \"Pieces, as common in chess circles, does not include pawns\"\r\n  [board row color]\r\n  (assoc board [\"a\" row] {:piece :rook\r\n                          :color color}\r\n         [\"b\" row] {:piece :knight\r\n                    :color color}\r\n         [\"c\" row] {:piece :bishop\r\n                    :color color}\r\n         [\"d\" row] {:piece :queen\r\n                    :color color}\r\n         [\"e\" row] {:piece :king\r\n                    :color color}\r\n         [\"f\" row] {:piece :bishop\r\n                    :color color}\r\n         [\"g\" row] {:piece :knight\r\n                    :color color}\r\n         [\"h\" row] {:piece :rook\r\n                    :color color}))\r\n\r\n(defn place-pawns\r\n  [board row color]\r\n  (assoc board [\"a\" row] {:piece :pawn\r\n                          :color color}\r\n         [\"b\" row] {:piece :pawn\r\n                    :color color}\r\n         [\"c\" row] {:piece :pawn\r\n                    :color color}\r\n         [\"d\" row] {:piece :pawn\r\n                    :color color}\r\n         [\"e\" row] {:piece :pawn\r\n                    :color color}\r\n         [\"f\" row] {:piece :pawn\r\n                    :color color}\r\n         [\"g\" row] {:piece :pawn\r\n                    :color color}\r\n         [\"h\" row] {:piece :pawn\r\n                    :color color}))\r\n\r\n(defn init-board\r\n  \"The initial state of a chess board\"\r\n  []\r\n  (-> {:current-turn :white} (place-pieces 1 :white) (place-pawns 2 :white) (place-pieces 8 :black) (place-pawns 7 :black)))\r\n\r\n(defn number-to-letter\r\n  [num]\r\n  (char (+ 96 num)))\r\n\r\n(defn letter-to-number\r\n  [letter]\r\n  (cond (= letter \"a\") 1\r\n        (= letter \"b\") 2\r\n        (= letter \"c\") 3\r\n        (= letter \"d\") 4\r\n        (= letter \"e\") 5\r\n        (= letter \"f\") 6\r\n        (= letter \"g\") 7\r\n        (= letter \"h\") 8))\r\n\r\n(defn difference\r\n  [a b]\r\n  (Math/abs (- a b)))\r\n\r\n(defn file-distance\r\n  [file1 file2]\r\n  (let [file1-num (letter-to-number file1)\r\n        file2-num (letter-to-number file2)]\r\n    (difference file1-num file2-num)))\r\n\r\n(defn rank-direction\r\n  [rank1 rank2]\r\n  (if (< rank1 rank2)\r\n     1\r\n     -1))\r\n\r\n(defn file-direction\r\n  [file1 file2]\r\n  (let [file1-num (letter-to-number file1)\r\n        file2-num (letter-to-number file2)]\r\n    (rank-direction file1-num file2-num)))\r\n\r\n(defn rank-distance\r\n  [rank1 rank2]\r\n  (difference rank1 rank2))\r\n\r\n(defn valid-pawn-move?\r\n  [board [from-file from-rank] [to-file to-rank] color]\r\n  (let [to-piece (get board [to-file to-rank])\r\n        direction (if (= color :white)\r\n                    1\r\n                    -1)\r\n        pawn-starting-rank (if (= color :white)\r\n                             2\r\n                             7)\r\n        at-starting-rank? (= from-rank pawn-starting-rank)\r\n        is-capture? (not (nil? to-piece))]\r\n    (if is-capture?\r\n      (and (= to-rank (+ direction from-rank))\r\n           (= (file-distance from-file to-file) 1))\r\n      (and (= from-file to-file)\r\n           (if at-starting-rank?\r\n             (or (= (+ from-rank direction) to-rank)\r\n                 (and (= (+ from-rank (* 2 direction)) to-rank)\r\n                      (nil? (get board [from-file (+ from-rank direction)]))))\r\n             (= (+ from-rank direction) to-rank))))))\r\n\r\n(defn valid-knight-move?\r\n  [[from-file from-rank] [to-file to-rank]]\r\n  (let [rank-distance (rank-distance from-rank to-rank)\r\n        file-distance (file-distance from-file to-file)]\r\n    (and (= (+ rank-distance file-distance) 3)\r\n         (= (* rank-distance file-distance) 2))))\r\n\r\n(defn rank-range\r\n  \"[1 4] => (2 3)\r\n   [4 1] => (3 2)\"\r\n  [from to]\r\n  (if (< from to)\r\n    (range (+ from 1) to)\r\n    (range (- from 1) to -1)))\r\n\r\n(defn file-range\r\n  \"[a e] => (b d)\r\n   [e a] => (d b)\"\r\n  [from to]\r\n  (let [from-num (letter-to-number from)\r\n        to-num (letter-to-number to)\r\n        num-range (rank-range from-num to-num)]\r\n    (map number-to-letter num-range)))\r\n\r\n(defn squares-empty?\r\n  [board squares]\r\n  (reduce (fn\r\n            [final-value square]\r\n            (and final-value (let [piece-on-square (get board square)]\r\n                               (nil? piece-on-square)))) true squares))\r\n\r\n(defn valid-bishop-move?\r\n  [board [from-file from-rank] [to-file to-rank]]\r\n  (let [rank-range (rank-range from-rank to-rank)\r\n        file-range (file-range from-file to-file)\r\n        rank-distance (rank-distance from-rank to-rank)\r\n        file-distance (file-distance from-file to-file)]\r\n    (and (= rank-distance file-distance)\r\n         (let [squares (map vector file-range rank-range)]\r\n           (squares-empty? board squares)))))\r\n\r\n(defn valid-rook-move?\r\n  [board [from-file from-rank] [to-file to-rank]]\r\n  (let [rank-range (rank-range from-rank to-rank)\r\n        file-range (file-range from-file to-file)\r\n        rank-distance (rank-distance from-rank to-rank)\r\n        file-distance (file-distance from-file to-file)]\r\n    (and (= (* rank-distance file-distance) 0)\r\n         (let [squares (if (= rank-distance 0)\r\n                         (map (fn [file] (vector file from-rank)) file-range)\r\n                         (map (fn [rank] (vector from-file rank)) rank-range))]\r\n           (squares-empty? board squares)))))\r\n\r\n(defn valid-queen-move?\r\n  [board from to]\r\n  (or (valid-rook-move? board from to)\r\n      (valid-bishop-move? board from to)))\r\n\r\n(defn valid-king-move?\r\n  [[from-file from-rank] [to-file to-rank]]\r\n  (let [rank-distance (rank-distance from-rank to-rank)\r\n        file-distance (file-distance from-file to-file)]\r\n    (and (< rank-distance 2)\r\n         (< file-distance 2))))\r\n\r\n(defn opposite-color\r\n  [color]\r\n  (if (= color :white) ; comparison\r\n    ; if true\r\n    :black\r\n    ; if false\r\n    :white))\r\n\r\n(defn execute-move\r\n  [board from to]\r\n  (-> board \r\n      (assoc :last-move {:castle false\r\n                         :piece (get board from)\r\n                         :from from\r\n                         :to to})\r\n      (assoc to (get board from)) \r\n      (assoc-in [to :has-moved] true) \r\n      (dissoc from) \r\n      (assoc :current-turn (opposite-color (get board :current-turn)))))\r\n\r\n(defn valid-move?\r\n  [board from to]\r\n  (let [from-piece (get board from)\r\n        to-piece (get board to)]\r\n    (and (not (nil? from-piece))\r\n         (not (= from to))\r\n         (= (get board :current-turn) (get from-piece :color))\r\n         (not (= (:color from-piece) (:color to-piece)))\r\n         (cond (= (:piece from-piece) :pawn) (valid-pawn-move? board from to (:color from-piece))\r\n               (= (:piece from-piece) :knight) (valid-knight-move? from to)\r\n               (= (:piece from-piece) :bishop) (valid-bishop-move? board from to)\r\n               (= (:piece from-piece) :rook) (valid-rook-move? board from to)\r\n               (= (:piece from-piece) :queen) (valid-queen-move? board from to)\r\n               (= (:piece from-piece) :king) (valid-king-move? from to)\r\n               :else false))))\r\n\r\n(defn king-under-attack?\r\n  \"Check if there is a valid move to the king square, which means king can be captured\"\r\n  [board color]\r\n  (let [[king-coordinates _] (first (filter (fn [piece] (and (= (:piece (val piece)) :king)\r\n                                                             (= (:color (val piece)) color))) board))]\r\n    (reduce (fn [final-value piece]\r\n              (or final-value (valid-move? board (first piece) king-coordinates))) false board)))\r\n\r\n(defn add-to-file\r\n  [file amount]\r\n  (-> file letter-to-number (+ amount) number-to-letter))\r\n\r\n(defn valid-castle?\r\n  [board [from-file from-rank] [to-file to-rank]]\r\n  (let [king (get board [from-file from-rank])\r\n        is-king (= (:piece king) :king)\r\n        king-unmoved? (nil? (get king :has-moved))\r\n        direction (file-direction from-file to-file)\r\n        intermediate-square [(add-to-file from-file direction) from-rank]\r\n        file-range (file-range from-file to-file)\r\n        file-distance (file-distance from-file to-file)\r\n        rook-file (if (= direction 1)\r\n                    \"h\"\r\n                    \"a\")\r\n        rook (get board [rook-file from-rank])\r\n        rook-unmoved? (and (not (nil? rook))\r\n                            (nil? (rook :has-moved)))]\r\n    (and is-king\r\n         king-unmoved?\r\n         rook-unmoved?\r\n         (= file-distance 2)\r\n         (not (king-under-attack? board (:color king)))\r\n         (squares-empty? board (map (fn [file] [file from-rank]) file-range))\r\n         (not (king-under-attack? (execute-move board [from-file from-rank] intermediate-square) (:color king)))\r\n         (not (king-under-attack? (execute-move board [from-file from-rank] [to-file to-rank]) (:color king))))))\r\n\r\n(defn execute-castle\r\n  [board [from-file from-rank] [to-file to-rank]]\r\n  (let [king (get board [from-file from-rank])\r\n        direction (file-direction from-file to-file)\r\n        intermediate-square [(add-to-file from-file direction) from-rank]\r\n        rook-file (if (= direction 1)\r\n                    \"h\"\r\n                    \"a\")\r\n        rook-square [rook-file from-rank]\r\n        rook (get board rook-square)]\r\n    (-> board \r\n        (assoc :last-move {:castle true\r\n                           :piece :king\r\n                           :from [from-file from-rank]\r\n                           :to [to-file to-rank]})\r\n        (assoc [to-file to-rank] king) \r\n        (assoc intermediate-square rook) \r\n        (assoc [from-file from-rank] nil) \r\n        (assoc rook-square nil) \r\n        (assoc-in [[to-file to-rank] :has-moved] true) \r\n        (assoc-in [intermediate-square :has-moved] true) \r\n        (assoc :current-turn (opposite-color (get board :current-turn))))))\r\n\r\n(defn execute-en-passant\r\n  [board [from-file from-rank] [to-file to-rank]]\r\n  (let [pawn (get board [from-file from-rank])\r\n        color (:color pawn)\r\n        direction (if (= color :white)\r\n                    1\r\n                    -1)]\r\n    (-> board \r\n        (assoc :last-move {:castle false\r\n                           :piece :pawn\r\n                           :from [from-file from-rank]\r\n                           :to [to-file to-rank]})\r\n        (assoc [to-file to-rank] pawn) \r\n        (assoc [from-file from-rank] nil) \r\n        (assoc [to-file (- to-rank direction)] nil) \r\n        (assoc :current-turn (opposite-color (get board :current-turn))))))\r\n\r\n(defn valid-en-passant?\r\n  [board [from-file from-rank] [to-file to-rank]]\r\n  (let [pawn (get board [from-file from-rank])\r\n        is-pawn? (= (:piece pawn) :pawn)\r\n        color (:color pawn)\r\n        direction (if (= color :white)\r\n                    1\r\n                    -1)\r\n        en-passant-rank (if (= color :white)\r\n                          5\r\n                          4)\r\n        enemy-pawn-starting-rank (if (= color :white)\r\n                             7\r\n                             2)\r\n        file-distance (file-distance from-file to-file)\r\n        last-move (get board :last-move)]\r\n    (and is-pawn?\r\n         (= en-passant-rank from-rank)\r\n         (= (+ from-rank direction) to-rank)\r\n         (= file-distance 1)\r\n         (= (get-in last-move [:piece :piece]) :pawn)\r\n         (= (:from last-move) [to-file enemy-pawn-starting-rank])\r\n         (= (:to last-move) [to-file en-passant-rank])\r\n         (not (king-under-attack? (execute-en-passant board [from-file from-rank] [to-file to-rank]) (:color pawn))))))\r\n\r\n(defn move-piece\r\n  \"Move a piece from one square to another.\r\n   Will not validate the move.\r\n   If starting square is empty, nothing happens.\"\r\n  [board from to]\r\n  (if (and (valid-move? board from to)\r\n           (not (king-under-attack? (execute-move board from to) (:color (get board from)))))\r\n    (execute-move board from to)\r\n    (if (valid-castle? board from to)\r\n      (execute-castle board from to)\r\n      (if (valid-en-passant? board from to)\r\n        (execute-en-passant board from to)\r\n        board))))\r\n\r\n; ========================== TESTS ==========================\r\n\r\n(deftest init-board-test\r\n  (let [board (init-board)]\r\n    (testing \"Getting an existing piece\"\r\n      (is (= (get board [\"e\" 1]) {:piece :king\r\n                                  :color :white})))\r\n    (testing \"Getting a square with no piece on it\"\r\n      (is (= (get board [\"e\" 3]) nil)))))\r\n\r\n(deftest move-piece-test\r\n  (let [board {[\"e\" 2] {:piece :pawn\r\n                        :color :white}\r\n               [\"e\" 7] {:piece :pawn\r\n                        :color :black}}\r\n        new-board (move-piece board [\"e\" 2] [\"e\" 4])\r\n        board-after-illegal-move (move-piece board [\"e\" 3] [\"e\" 4])\r\n        board-after-move-to-self (move-piece board [\"e\" 2] [\"e\" 2])]\r\n    (testing \"Moving a pawn\"\r\n      (is (= new-board {[\"e\" 4] {:piece :pawn\r\n                                 :color :white}\r\n                        [\"e\" 7] {:piece :pawn\r\n                                 :color :black}})))\r\n    (testing \"Trying to move when there is no piece\"\r\n      (is (= board board-after-illegal-move)))\r\n    (testing \"Trying to move when there is no piece\"\r\n      (is (= board board-after-move-to-self)))))\r\n\r\n; TODO\r\n; Multiplayer:\r\n;     Websockets\r\n;     Dynamic creation of rooms. Going to <url>/<made-up-id> should create a game people can join"]}