{"version":3,"sources":["reframe/core.cljs"],"mappings":"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","names":["reframe.core/socket-id","reframe.core/initialize-app-state","board","reframe.chess/init-board","cljs.core/List","re_frame.core.reg_event_db","p__27047","vec__27048","cljs.core.nth","vec__27051","db","_","rank","file","square-from","history","square","reframe.chess/number-to-letter","cljs.core.assoc","new-board","reframe.chess/move-piece","new-history","cljs.core.conj","cljs.core._EQ_","re-frame.core/dispatch","re_frame.core.reg_event_fx","coeffects","reframe.chess/opposite-color","cljs.core/count","cljs.core/rest","cljs.core.println","p__27054","vec__27055","data","re_frame.core.reg_sub","p__27058","map__27059","cljs.core/--destructure-map","cljs.core.get","reframe.core/piece-img","color","piece","cljs.core/name","reframe.core/square-clicked","reframe.core/chess-board","pov","rank-range","cljs.core.range","file-range","iter__4611__auto__","s__27061","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4607__auto__","s__27063","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__27065","cljs.core/chunk-buffer","i__27064","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27062","cljs.core/chunk-rest","cljs.core/cons","fs__4608__auto__","cljs.core.concat","iter__27060","cljs.core/even?","reframe.core/ui","cljs.core/deref","re_frame.core.subscribe","reframe.core/render","reagent.dom.render","js/document.getElementById","reframe.core/clear-cache-and-render!","re-frame.core/clear-subscription-cache!","reframe.core/run","re-frame.core/dispatch-sync","reframe.core/options","cljs.core/chunk-first"],"sourcesContent":["(ns reframe.core\r\n  (:require [reagent.dom]\r\n            [re-frame.core :as rf]\r\n            [reframe.chess :as chess]\r\n            [websocket-fx.core :as wfx]))\r\n\r\n; ========== STATE ==========\r\n(def socket-id :default)\r\n\r\n(defn initialize-app-state\r\n  []\r\n  (let [board (chess/init-board)]\r\n    {:board board\r\n     :pov :white\r\n     :history (list board)}))\r\n\r\n; ========== EVENT HANDLING / STATE UPDATING ==========\r\n\r\n(rf/reg-event-db :initialize initialize-app-state)\r\n\r\n(rf/reg-event-db \r\n :square-clicked \r\n (fn [db [_ [rank file]]]\r\n   (let [square-from (:square-from db)\r\n         board (:board db)\r\n         history (:history db)\r\n         square [(chess/number-to-letter file) rank]]\r\n     (if (nil? square-from)\r\n       (assoc db :square-from square)\r\n       (let [new-board (chess/move-piece board square-from square)\r\n             new-history (conj history new-board)]\r\n         (if-not (= board new-board)\r\n           (do\r\n             (rf/dispatch [::wfx/push socket-id {:kind :client-state\r\n                                                 :board new-board\r\n                                                 :history new-history}])\r\n             (assoc db :board new-board\r\n                    :square-from nil\r\n                    :history new-history))\r\n           (assoc db :square-from nil)))))))\r\n\r\n(rf/reg-event-fx\r\n :change-pov\r\n (fn [coeffects _]\r\n   (let [db (:db coeffects)]\r\n     {:db (assoc db :pov (chess/opposite-color (:pov db)))})))\r\n\r\n(rf/reg-event-fx\r\n :undo-move\r\n (fn [coeffects _]\r\n   (let [db (:db coeffects) \r\n         history (:history db)]\r\n     (when-not (= (count history) 1)\r\n       (do (rf/dispatch [::wfx/push socket-id {:kind :client-state\r\n                                               :board (nth history 1)\r\n                                               :history (rest history)}])\r\n           {:db (-> db (assoc :board (nth history 1)) (assoc :history (rest history)))})))))\r\n\r\n(rf/reg-event-fx\r\n ::websocket-connected\r\n (fn [_ _]\r\n   (rf/dispatch [::wfx/subscribe socket-id :game-subscription {:message {:kind :subscribe-to-game} \r\n                                                                 :on-message [::game-updated]}])))\r\n\r\n(rf/reg-event-fx\r\n ::websocket-disconnected\r\n (fn [_ _]\r\n   (println \"disconnected\")))\r\n\r\n(rf/reg-event-fx\r\n ::game-updated\r\n (fn [coeffects [_ data]]\r\n   (let [db (:db coeffects)]\r\n        {:db (assoc db :board (:board data) :history (:history data))})))\r\n\r\n; ========== X ==========\r\n\r\n(rf/reg-sub\r\n :chess-query-id\r\n (fn [db _]\r\n   (:board db)))\r\n\r\n(rf/reg-sub\r\n :pov-query-id\r\n (fn [db _]\r\n   (:pov db)))\r\n\r\n; ========== VIEW RENDERING ==========\r\n\r\n(defn piece-img\r\n  [{:keys [color piece]}]\r\n  [:img {:src (str \"imgs/\" (name color) (name piece) \".svg\")}])\r\n\r\n(defn square-clicked\r\n  [rank file]\r\n  (fn [_] (rf/dispatch [:square-clicked [rank file]])))\r\n\r\n(defn chess-board\r\n  \"Component giving GUI of the board\"\r\n  [board pov]\r\n  [:div#chess-board {:style {:display \"flex\"\r\n                             :flex-wrap \"wrap\"\r\n                             :width \"min(50vh, 50vw)\"\r\n                             :height \"min(50vh, 50vw)\"\r\n                             :border \"1px solid grey\"}}\r\n   (let [rank-range (if (= pov :black)\r\n                      (range 1 9)\r\n                      (range 8 0 -1))\r\n         file-range (if (= pov :black)\r\n                      (range 8 0 -1)\r\n                      (range 1 9))]\r\n     (for [rank rank-range\r\n           file file-range]\r\n       (let [piece (get board [(chess/number-to-letter file) rank])]\r\n         (if (even? (+ file rank))\r\n           [:div#light-square {:style {:background-color \"#dee3e6\"\r\n                                       :width \"12.5%\"\r\n                                       :height \"12.5%\"}\r\n                               :on-click (square-clicked rank file)\r\n                               :key (str rank file)}\r\n            (when-not (nil? piece)\r\n              (piece-img piece))]\r\n           [:div#dark-square {:style {:background-color \"#8ca2ad\"\r\n                                      :width \"12.5%\"\r\n                                      :height \"12.5%\"}\r\n                              :on-click (square-clicked rank file)\r\n                              :key (str rank file)}\r\n            (when-not (nil? piece)\r\n              (piece-img piece))]))))])\r\n\r\n(defn ui\r\n  []\r\n  (let [board (rf/subscribe [:chess-query-id])\r\n        pov (rf/subscribe [:pov-query-id])]\r\n    [:div\r\n     [:h1 \"ClojureScript chess!\"]\r\n     [chess-board @board @pov]\r\n     [:br]\r\n     [:button {:on-click #(rf/dispatch [:change-pov])} \"Rotate board\"]\r\n     [:button {:on-click #(rf/dispatch [:undo-move])} \"Undo move\"]]))\r\n\r\n; ========== RE-FRAME MAGIC ==========\r\n\r\n(defn render\r\n  []\r\n  (reagent.dom/render [ui]\r\n                      (js/document.getElementById \"app\")))\r\n\r\n(defn ^:dev/after-load clear-cache-and-render!\r\n  []\r\n  (rf/clear-subscription-cache!)\r\n  (render))\r\n\r\n(defn run\r\n  []\r\n  (rf/dispatch-sync [:initialize])\r\n  (render))\r\n\r\n; ========== SOCKETS ==========\r\n\r\n(def options\r\n  {:url \"ws://chess-server.herokuapp.com/ws\"\r\n   :format :edn \r\n   :on-connect [::websocket-connected]\r\n   :on-disconnect [::websocket-disconnected]})\r\n\r\n(rf/dispatch [::wfx/connect socket-id options])\r\n(rf/dispatch [::wfx/disconnect socket-id])"]}