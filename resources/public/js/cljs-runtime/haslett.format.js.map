{"version":3,"sources":["haslett/format.cljs"],"mappings":";AAOA,AAAA;AAAA;;;;wBAAA,xBAAaS;;AAAb,IAAAT,uCAAA,WAEUU,UAAUC;AAFpB,AAAA,IAAAV,kBAAA,EAAA,cAAA,OAAA,pBAEUS,yBAAAA;IAFVR,kBAAA,CAAAC,oBAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,kEAAAA,pBAEUQ,8CAAAA,pCAAUC,8CAAAA;;AAFpB,IAAAN,kBAAA,CAAAF,oBAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,kEAAAA,pBAEUK,8CAAAA,pCAAUC,8CAAAA;;AAFpB,MAAA,AAAAL,2BAAA,cAEUI;;;;AAFV,AAAA,sBAAA,tBAEGP,oDAAOO,UAAUC;AAFpB,AAAA,GAAA,EAAA,GAAA,cAAA,aAAA,GAAA,CAAA,gDAAA,9EAEUD,8BAAAA;AAFV,OAEUA,6CAAAA,UAAUC;;AAFpB,OAAAX,qCAEUU,UAAUC;;;;AAFpB,IAAAJ,wCAAA,WAGUG,UAAUE;AAHpB,AAAA,IAAAX,kBAAA,EAAA,cAAA,OAAA,pBAGUS,yBAAAA;IAHVR,kBAAA,CAAAM,qBAAA,AAAAJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,iEAAAA,nBAGUQ,6CAAAA,nCAAUE,6CAAAA;;AAHpB,IAAAP,kBAAA,CAAAG,qBAAA;AAAA,AAAA,GAAA,GAAA,CAAAH,mBAAA;AAAA,QAAAA,gDAAAA,iEAAAA,nBAGUK,6CAAAA,nCAAUE,6CAAAA;;AAHpB,MAAA,AAAAN,2BAAA,eAGUI;;;;AAHV,AAAA,uBAAA,vBAGGF,sDAAOE,UAAUE;AAHpB,AAAA,GAAA,EAAA,GAAA,cAAA,aAAA,GAAA,CAAA,iDAAA,/EAGUF,8BAAAA;AAHV,OAGUA,8CAAAA,UAAUE;;AAHpB,OAAAL,sCAGUG,UAAUE;;;;AAHpB,AAKA;;;AAAKC,0BAEH;AAAA,GAAA,QAAAC,oCAAAC,2CAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,wFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,qCAAAE;;;AAAA,CAAA,AAAA,AAAAF,+EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,wEAAAG;;AAAA,CAAA,AAAA,AAAAH,oFAAA,WACUS,EAAEC;;AADZ,AAAA,YAAA,RACUD;AADV,AACeC;;;AADf,CAAA,AAAA,AAAAV,qFAAA,WAEUS,EAAEE;;AAFZ,AAAA,YAAA,RAEUF;AAFV,AAEeE;;;AAFf,CAAA,AAAAX,gDAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,sDAAA;;AAAA,CAAA,AAAAA,yDAAA;;AAAA,CAAA,AAAAA,8DAAA,WAAAI,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAG,4CAAA,oDAAAN;AAAA,AAAA,YAAAF,qCAAAE;;;AAAAF;;AAAA,YAAAA,qCAAA;;;AAIF;;;AAAKY,yBAEH;AAAA,GAAA,QAAAf,oCAAAC,2CAAAe;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,wFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,qCAAAE;;;AAAA,CAAA,AAAA,AAAAF,+EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,wEAAAX;;AAAA,CAAA,AAAA,AAAAW,oFAAA,WACUL,EAAEC;;AADZ,AAAA,YAAA,RACUD;AADV,AACe,OAACS,uBAAa,uDAAA,vDAACC,6GAAsBT;;;AADpD,CAAA,AAAA,AAAAI,qFAAA,WAEUL,EAAEE;;AAFZ,AAAA,YAAA,RAEUF;AAFV,AAEe,OAACW,wBAAc,uDAAA,vDAACC,6GAAsBV;;;AAFrD,CAAA,AAAAG,gDAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,sDAAA;;AAAA,CAAA,AAAAA,yDAAA;;AAAA,CAAA,AAAAA,8DAAA,WAAAV,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAY,4CAAA,oDAAAD;AAAA,AAAA,YAAAF,qCAAAE;;;AAAAF;;AAAA,YAAAA,qCAAA;;;AAIF;;;AAAKQ,qBAEH;AAAA,GAAA,QAAAzB,oCAAAC,2CAAAyB;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,wFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,qCAAAE;;;AAAA,CAAA,AAAA,AAAAF,+EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,wEAAArB;;AAAA,CAAA,AAAA,AAAAqB,oFAAA,WACUf,EAAEC;;AADZ,AAAA,YAAA,RACUD;AADV,AACe,OAACmB,sDAAgBlB;;;AADhC,CAAA,AAAA,AAAAc,qFAAA,WAEUf,EAAEE;;AAFZ,AAAA,YAAA,RAEUF;AAFV,AAEe,OAACoB,wGAAOlB;;;AAFvB,CAAA,AAAAa,gDAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,sDAAA;;AAAA,CAAA,AAAAA,yDAAA;;AAAA,CAAA,AAAAA,8DAAA,WAAApB,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAsB,4CAAA,oDAAAD;AAAA,AAAA,YAAAF,qCAAAE;;;AAAAF;;AAAA,YAAAA,qCAAA;;;AAIF;;;AAAKM,sBAEH;AAAA,GAAA,QAAAjC,oCAAAC,2CAAAiC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,wFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,qCAAAE;;;AAAA,CAAA,AAAA,AAAAF,+EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,wEAAA7B;;AAAA,CAAA,AAAA,AAAA6B,oFAAA,WACUvB,EAAEC;;AADZ,AAAA,YAAA,RACUD;AADV,AACe,OAAC2B,mDAAQ,AAACC,WAAc3B;;;AADvC,CAAA,AAAA,AAAAsB,qFAAA,WAEUvB,EAAEE;;AAFZ,AAAA,YAAA,RAEUF;AAFV,AAEe,OAAC6B,eAAkB,AAACC,qBAAQ5B;;;AAF3C,CAAA,AAAAqB,gDAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,sDAAA;;AAAA,CAAA,AAAAA,yDAAA;;AAAA,CAAA,AAAAA,8DAAA,WAAA5B,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAA8B,4CAAA,oDAAAD;AAAA,AAAA,YAAAF,qCAAAE;;;AAAAF;;AAAA,YAAAA,qCAAA","names":["haslett$format$Format$read$dyn","x__4509__auto__","m__4510__auto__","haslett.format/read","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","haslett$format$Format$write$dyn","haslett.format/write","haslett.format/Format","formatter","string","value","haslett.format/identity","js/haslett","js/haslett.format","js/haslett.format.t_haslett$format27632","haslett.format/t_haslett$format27632","_27634","meta27633","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","haslett.format/->t_haslett$format27632","_","s","v","haslett.format/transit","js/haslett.format.t_haslett$format27643","haslett.format/t_haslett$format27643","_27645","meta27644","haslett.format/->t_haslett$format27643","cognitect.transit/read","cognitect.transit.reader","cognitect.transit/write","cognitect.transit.writer","haslett.format/edn","js/haslett.format.t_haslett$format27646","haslett.format/t_haslett$format27646","_27648","meta27647","haslett.format/->t_haslett$format27646","cljs.reader.read_string","cljs.core.pr_str","haslett.format/json","js/haslett.format.t_haslett$format27649","haslett.format/t_haslett$format27649","_27651","meta27650","haslett.format/->t_haslett$format27649","cljs.core.js__GT_clj","js/JSON.parse","js/JSON.stringify","cljs.core/clj->js"],"sourcesContent":["(ns haslett.format\n  \"A namespace containing formatters that read and write information from\n  WebSocket streams. Used with haslett.client/connect.\"\n  (:refer-clojure :exclude [identity])\n  (:require [cljs.reader :as edn]\n            [cognitect.transit :as transit]))\n\n(defprotocol Format\n  \"The format protocol.\"\n  (read  [formatter string])\n  (write [formatter value]))\n\n(def identity\n  \"The identity formatter. Does nothing to the input or output.\"\n  (reify Format\n    (read  [_ s] s)\n    (write [_ v] v)))\n\n(def transit\n  \"Read and write data encoded in transit+json.\"\n  (reify Format\n    (read  [_ s] (transit/read (transit/reader :json) s))\n    (write [_ v] (transit/write (transit/writer :json) v))))\n\n(def edn\n  \"Read and write data encoded in edn.\"\n  (reify Format\n    (read  [_ s] (edn/read-string s))\n    (write [_ v] (pr-str v))))\n\n(def json\n  \"Read and write data encoded in JSON.\"\n  (reify Format\n    (read  [_ s] (js->clj (js/JSON.parse s)))\n    (write [_ v] (js/JSON.stringify (clj->js v)))))\n"]}